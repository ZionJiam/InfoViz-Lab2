---
install.packages("tidyverse")format: html
editor: visual
author: Firebrick (P3) 
---

## Task 2

### Import Libraries

```{r}
library(tidyverse)
library(readxl)
library(dplyr)
```

### Read Excel Files and Split by Male and Female

```{r}

dfr <- read_excel("outputFile.xlsx", sheet = "T4", skip = 10)
colnames(dfr)

dfr_row <- slice(dfr, 0, 27:50, 52:75)

# Split the data by Sex
dfr_male <- dfr %>% slice(0, 27:50)
dfr_female <- dfr %>% slice(52:75)

```

### Create New DataFrame

```{r}
# Dataframe Header
dfr_male_year <- select(dfr_male, `Data Series`, `1960`, `1970`, `1980`, `1990`, `2000`, `2010`, `2020`)
colnames(dfr_male_year)
dfr_female_year <- select(dfr_female, `Data Series`, `1960`, `1970`, `1980`, `1990`, `2000`, `2010`, `2020`)
colnames(dfr_female)


dfr_male_year
dfr_female_year
```

### Create replacement Mapping

```{r}
# Define mapping of year -> list(target row, replacement row)
replacement_map <- list(
  "1960" = list(target = "70 - 74 Years", replacement = "70 Years & Over"),
  "1970" = list(target = "80 - 84 Years", replacement = "80 Years & Over"),
  "1980" = list(target = "85 - 89 Years", replacement = "85 Years & Over"),
  "1990" = list(target = "85 - 89 Years", replacement = "85 Years & Over")
)
```

### Create Function to apply replacement to target

```{r}

apply_replacement <- function(df, year_col, target_label, replacement_label) {
  replacement_value <- df %>%
    filter(`Data Series` == replacement_label) %>%
    pull(!!sym(year_col)) %>%
    first()
  
  df %>%
    mutate(!!year_col := if_else(
      `Data Series` == target_label,
      replacement_value,
      !!sym(year_col)
    ))
}

```

### Loop Map with Function

```{r}

# Apply to both male and female data
for (year in names(replacement_map)) {
  dfr_male_year <- apply_replacement(dfr_male_year,
                                     year,
                                     replacement_map[[year]]$target,
                                     replacement_map[[year]]$replacement)
  
  dfr_female_year <- apply_replacement(dfr_female_year,
                                       year,
                                       replacement_map[[year]]$target,
                                       replacement_map[[year]]$replacement)
}

dfr_male_year

dfr_male_year %>% filter(`Data Series` %in% c("70 - 74 Years", "80 - 84 Years", "85 - 89 Years"))
dfr_female_year %>% filter(`Data Series` %in% c("70 - 74 Years", "80 - 84 Years", "85 - 89 Years"))


```

### Remove all "& Over" but not "90 & Over"

```{r}

dfr_male_year <- dfr_male_year %>%
  filter(!(str_detect(`Data Series`, "& Over") & `Data Series` != "90 Years & Over"))

dfr_female_year <- dfr_female_year %>%
  filter(!(str_detect(`Data Series`, "& Over") & `Data Series` != "90 Years & Over"))
```

### Add sex to column

```{r}

# Add sex column before pivoting
dfr_male_long <- dfr_male_year %>%
  mutate(sex = "Male")

dfr_female_long <- dfr_female_year %>%
  mutate(sex = "Female")

```

### Combine the data rows back

```{r}
# Bind the rows together
dfr_combined <- bind_rows(dfr_male_long, dfr_female_long)

```

### Change char numerical data to double numerical data

```{r}
# Change to numeric data for all numbers values
dfr_combined <- dfr_combined %>%
  mutate(across(c(`1960`, `1970`, `1980`, `1990`, `2000`, `2010`, `2020`), as.numeric))

dfr_combined
```

### Extract Age base on Data Series string first number

```{r}
# Clean age column (extract lower age limit from "70 - 74 Years", etc.)
dfr_combined <- dfr_combined %>%
  mutate(age = str_extract(`Data Series`, "^\\d+")) %>%  # extract first number
  mutate(age = as.numeric(age)) 

dfr_combined
```

### Pivot the Year and Population and Drop Data Series column and NA rows

```{r}
dfr_tidy <- dfr_combined %>%
  # Pivot the year columns.
  pivot_longer(
    cols = all_of(as.character(seq(1960, 2020, by = 10))), # Explicitly name year columns to pivot
    names_to = "year_char",  # Store the year names (characters) temporarily
    values_to = "pop"        # Population values (already numeric from previous step)
  ) %>%
  # Convert data types to match target format:
  # - year: character from pivot to numeric
  # - sex: character to factor with specified levels
  mutate(
    year = as.numeric(year_char),
    sex = factor(sex, levels = c("Male", "Female"))
  ) %>%

  # Select the final columns in the desired order.
  select(age, sex, year, pop) %>%

  # Remove NAs in these essential columns
  drop_na() %>%

  # Sort the data as specified: by age, then sex (Male before Female), then year
  arrange(age, sex, year)

# Display the final tidy tibble
print(dfr_tidy)


```

## Match with Reference Data

```{r}
sg_ref <- readr::read_csv(
"sg_5yr_cohorts.csv",
col_types = cols(sex = col_factor(levels = c("Male", "Female")))
)
waldo::compare(dfr_tidy, sg_ref, tolerance = 1e-12)
```

## Task 3
1. Key takeaway:
A key takeaway from this lab was the sheer efficiency and readability of the tidyverse for data manipulation. Seeing how functions like pivot_longer, mutate, and select could systematically transform messy data into a structured format was impactful, especially when imagining doing this with base R or manually.

2. Challenges:
The logic for handling the 'Years & Over' data for the oldest cohorts in Task 2 presented a hurdle. My initial thought was to perform complex conditional replacements, but understanding that parse_number() and then filtering could achieve the desired interpretation more elegantly took some time to click.

3. AI assistance:
I utilized ChatGPT to help debug specific error messages, such as when an object was not found or when a dplyr function wasn't behaving as expected. It was also helpful for suggesting alternative tidyverse functions for certain tasks, like different ways to extract numbers from strings, which broadened my understanding of available tools.

4. Teamwork:
Our team collaborated by first discussing the overall approach for each task and then dividing the coding sections; for instance, one person might focus on initial data import and cleaning, while another tackled the pivoting and final formatting. A key strength was our communication when we hit roadblocks, using [shared document/chat/pair programming] to troubleshoot together. An area for improvement could be to establish a more consistent coding style from the outset to make merging code or reviewing each other's work even smoother.

5. Additional feedback: 
None